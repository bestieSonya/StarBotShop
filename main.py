import asyncio
import json
import logging
import os
from typing import Dict, Optional, Tuple

import aiofiles
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


class UserDataManager:
    def __init__(self, filename: str = "user_data.json", bot_username: str = "") -> None:
        self.filename = filename
        self._file_lock = asyncio.Lock()
        self.bot_username = bot_username

    async def load_data(self) -> Dict[str, dict]:
        async with self._file_lock:
            try:
                async with aiofiles.open(self.filename, "r", encoding="utf-8") as file:
                    contents = await file.read()
                    return json.loads(contents)
            except FileNotFoundError:
                return {}
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {self.filename}")
                return {}

    async def save_data(self, data: Dict[str, dict]) -> None:
        async with self._file_lock:
            async with aiofiles.open(self.filename, "w", encoding="utf-8") as file:
                json_str = json.dumps(data, indent=4, ensure_ascii=False)
                await file.write(json_str)

    async def get_or_create_user(
        self, user_id: int, username: str, referred_by: Optional[int] = None
    ) -> Dict[str, dict]:
        data = await self.load_data()
        uid = str(user_id)
        if uid not in data:
            data[uid] = {
                "username": username,
                "referrals": 0,
                "total_earned": 0.0,
                "referred_by": referred_by,
            }
            await self.save_data(data)
        return data[uid]

    async def add_referral(self, referrer_id: int) -> None:
        data = await self.load_data()
        ref_id = str(referrer_id)
        if ref_id in data:
            data[ref_id]["referrals"] += 1
            await self.save_data(data)

    async def get_user_stats(self, user_id: int) -> Tuple[int, float]:
        data = await self.load_data()
        uid = str(user_id)
        if uid in data:
            user = data[uid]
            return user["referrals"], user["total_earned"]
        return 0, 0.0

    def generate_referral_link(self, user_id: int) -> str:
        return f"https://t.me/{self.bot_username}?start=r{user_id}"

    async def find_user_by_username(self, username: str) -> Optional[str]:
        # username –±–µ–∑ @
        data = await self.load_data()
        for uid, user in data.items():
            if user.get("username") and user["username"].lower() == username.lower():
                return uid
        return None


class TelegramBotApp:
    def __init__(self) -> None:
        token = os.getenv("BOT_TOKEN")
        wallet = os.getenv("YOOMONEY_WALLET")

        if not token or not wallet:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN –∏–ª–∏ YOOMONEY_WALLET –≤ .env")

        self.token = token
        self.wallet = wallet
        self.user_data = UserDataManager()
        self.application = Application.builder().token(self.token).build()

        self._register_handlers()

    def _register_handlers(self) -> None:
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("menu", self.set_menu))
        self.application.add_handler(
            CallbackQueryHandler(self.purpose_handler, pattern="^purpose_")
        )
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_input)
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        user_id = user.id
        username = user.username or user.first_name

        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ —á–µ—Ä–µ–∑ get_me –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        me = await context.bot.get_me()
        self.user_data.bot_username = me.username

        args = context.args
        referred_by = None
        if args and args[0].startswith("r"):
            try:
                referred_by = int(args[0][1:])
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–∫–æ–¥: {args}")

        await self.user_data.get_or_create_user(user_id, username, referred_by)
        if referred_by:
            await self.user_data.add_referral(referred_by)

        text = (
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "üß∏ –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu.\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Telegram –∑–≤—ë–∑–¥—ã –±–µ–∑ KYC –∏ –¥–µ—à–µ–≤–ª–µ.\n\n"
            "üéÅ –ö–æ–º—É –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã?"
        )

        keyboard = [
            [InlineKeyboardButton("–î–ª—è —Å–µ–±—è", callback_data="purpose_self")],
            [InlineKeyboardButton("–í –ø–æ–¥–∞—Ä–æ–∫", callback_data="purpose_friend")],
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def purpose_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        purpose = query.data

        if purpose == "purpose_self":
            context.user_data["awaiting_amount"] = True
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω. 50):")

        elif purpose == "purpose_friend":
            context.user_data["awaiting_friend_username"] = True
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ @username –¥—Ä—É–≥–∞:")

    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = update.message.text.strip()

        if context.user_data.get("awaiting_friend_username"):
            if not text.startswith("@"):
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username —Å @. –ü—Ä–∏–º–µ—Ä: @username")
                return

            username = text[1:]  # —É–±–∏—Ä–∞–µ–º @
            friend_id = await self.user_data.find_user_by_username(username)
            if not friend_id:
                ref_link = self.user_data.generate_referral_link(update.effective_user.id)
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å –∑–≤—ë–∑–¥—ã, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n\n"
                    f"<code>{ref_link}</code>\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–∫—Ä—ã–ª –±–æ—Ç–∞ –∏ –≤—ã —Å–º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É.",
                    parse_mode="HTML",
                )
                return

            context.user_data["friend_username"] = text
            context.user_data.pop("awaiting_friend_username")
            context.user_data["awaiting_amount"] = True
            await update.message.reply_text("‚úÖ –ù–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–º–∏–Ω. 50):")
            return

        if context.user_data.get("awaiting_amount"):
            try:
                amount = int(text)
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                return

            if amount < 50 or amount > 1_000_000:
                await update.message.reply_text("–î–∏–∞–ø–∞–∑–æ–Ω: 50‚Äì1,000,000 –∑–≤—ë–∑–¥.")
                return

            context.user_data.pop("awaiting_amount")
            user_id = update.effective_user.id
            price_rub = max(2, round(amount * 0.05, 2))
            comment = f"Stars_{amount}_uid{user_id}"
            url = f"https://yoomoney.ru/to/{self.wallet}?amount={price_rub}&comment={comment}"
            keyboard = [[InlineKeyboardButton("–°–ë–ü (YooMoney)", url=url)]]
            await update.message.reply_text(
                "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (—Å—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω.):",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )

        elif text == "‚≠ê –ö—É–ø–∏—Ç—å –ó–≤–µ–∑–¥—ã":
            keyboard = [
                [InlineKeyboardButton("–î–ª—è —Å–µ–±—è", callback_data="purpose_self")],
                [InlineKeyboardButton("–í –ø–æ–¥–∞—Ä–æ–∫", callback_data="purpose_friend")],
            ]
            await update.message.reply_text(
                "üéÅ –ö–æ–º—É –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã:", reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
            await self.partner_program(update, context)

    async def partner_program(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        ref, earned = await self.user_data.get_user_stats(user_id)
        link = self.user_data.generate_referral_link(user_id)
        text = (
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
            "‚ú® –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% –æ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö!\n\n"
            f"<b>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{link}</code>\n\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref}</b>\n"
            f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{earned:.2f} RUB</b>"
        )
        keyboard = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f"–ü–æ–∫—É–ø–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã: {link}")],
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

    async def set_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = [["‚≠ê –ö—É–ø–∏—Ç—å –ó–≤–µ–∑–¥—ã"], ["üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"]]
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    def run(self) -> None:
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()


if __name__ == "__main__":
    bot = TelegramBotApp()
    bot.run()
