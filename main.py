import asyncio
import json
import logging
import os
from typing import Dict, Optional, Tuple
from urllib.parse import quote

import aiofiles
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class UserDataManager:
    def __init__(
        self, filename: str = "user_data.json", bot_username: str = ""
    ) -> None:
        self._filename = filename
        # –¢–µ–ø–µ—Ä—å bot_username –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –∏–∑ TelegramBotApp
        self._bot_username = bot_username
        self._file_lock = asyncio.Lock()

    async def load_data(self) -> Dict[str, dict]:
        async with self._file_lock:
            try:
                async with aiofiles.open(self._filename, mode="r", encoding="utf-8") as file:
                    contents = await file.read()
                    return json.loads(contents)
            except FileNotFoundError:
                return {}
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {self._filename}")
                return {}

    async def save_data(self, data: Dict[str, dict]) -> None:
        async with self._file_lock:
            async with aiofiles.open(self._filename, mode="w", encoding="utf-8") as file:
                json_str = json.dumps(data, indent=4, ensure_ascii=False)
                await file.write(json_str)

    async def get_or_create_user(
        self, user_id: int, username: str, referred_by: Optional[int] = None
    ) -> Dict[str, dict]:
        data = await self.load_data()
        user_key = str(user_id)
        if user_key not in data:
            data[user_key] = {
                "username": username,
                "referrals": 0,
                "total_earned": 0.0,
                "balance_stars": 0,
                "referred_by": referred_by,
            }
            await self.save_data(data)
        return data[user_key]

    async def add_user_balance(self, user_id: int, amount: int) -> None:
        data = await self.load_data()
        user_key = str(user_id)
        if user_key in data:
            data[user_key].setdefault("balance_stars", 0)
            data[user_key]["balance_stars"] += amount
            await self.save_data(data)
            logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –∑–≤—ë–∑–¥.")

    async def get_user_stats(self, user_id: int) -> Tuple[int, float]:
        data = await self.load_data()
        user_key = str(user_id)
        if user_key in data:
            user = data[user_key]
            return user.get("referrals", 0), user.get("total_earned", 0.0)
        return 0, 0.0

    # –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self._bot_username, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–∑ .env
    def generate_referral_link(self, user_id: int) -> str:
        return f"https://t.me/{self._bot_username}?start=r{user_id}"

    async def find_user_by_username(self, username: str) -> Optional[str]:
        data = await self.load_data()
        username_lower = username.lower()
        for user_id, user_info in data.items():
            if user_info.get("username", "").lower() == username_lower:
                return user_id
        return None


class TelegramBotApp:
    def __init__(self) -> None:
        token = os.getenv("BOT_TOKEN")
        wallet = os.getenv("YOOMONEY_WALLET")
        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        star_rate_str = os.getenv("STAR_RATE")
        support_username = os.getenv("SUPPORT_USERNAME")
        # --- –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ---
        bot_username_from_env = os.getenv("BOT_USERNAME_FOR_LINK") # <--- –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ –∏–∑ .env
        # ------------------------

        if not all([token, wallet, admin_chat_id, star_rate_str, support_username, bot_username_from_env]): # <--- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
            raise ValueError(
                "–û–¥–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞: BOT_TOKEN, YOOMONEY_WALLET, ADMIN_CHAT_ID, STAR_RATE, SUPPORT_USERNAME, BOT_USERNAME_FOR_LINK"
            )

        try:
            self._star_rate = float(star_rate_str)
        except ValueError:
            raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è STAR_RATE –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –∑–≤–µ–∑–¥–∞ = 1.3 —Ä—É–±–ª—è)")

        self._token = token
        self._wallet = wallet
        self._admin_chat_id = int(admin_chat_id)
        self._support_username = support_username.lstrip('@')
        # --- –ü–µ—Ä–µ–¥–∞—ë–º –∏–º—è –±–æ—Ç–∞ –∏–∑ .env –≤ UserDataManager ---
        self._user_data_manager = UserDataManager(bot_username=bot_username_from_env)
        # ---------------------------------------------------
        self._application = Application.builder().token(self._token).build()

        self._register_handlers()

    def _register_handlers(self) -> None:
        self._application.add_handler(CommandHandler("start", self._start))
        self._application.add_handler(CommandHandler("menu", self._set_menu))
        self._application.add_handler(CallbackQueryHandler(self._purpose_handler, pattern="^purpose_"))
        self._application.add_handler(CallbackQueryHandler(self._payment_confirm_handler, pattern="^confirm_payment"))
        self._application.add_handler(CallbackQueryHandler(self._admin_action_handler, pattern="^admin_"))
        self._application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_input))

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        if not user:
            return

        # me = await context.bot.get_me() # <--- –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å username –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è —Å—Å—ã–ª–∫–∏
        # self._user_data_manager._bot_username = me.username # <--- –£–±—Ä–∞–Ω–æ

        referred_by = None
        if context.args and context.args[0].startswith('r'):
            try:
                referred_by = int(context.args[0][1:])
            except (ValueError, IndexError):
                referred_by = None
        
        await self._user_data_manager.get_or_create_user(
            user.id, user.username or user.first_name, referred_by
        )
        
        await self._set_menu(update, context)

    async def _handle_amount_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str
    ) -> None:
        try:
            amount = int(text)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        if not (50 <= amount <= 1_000_000):
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 50 –¥–æ 1,000,000.")
            return

        user_id = update.effective_user.id
        price_rub = max(2, round(amount * self._star_rate, 2))
        comment = f"Stars_{amount}_uid{user_id}"

        context.user_data["payment_amount"] = amount
        context.user_data["payment_price"] = price_rub
        context.user_data["payment_comment"] = comment
        context.user_data.pop("awaiting_amount", None)

        encoded_comment = quote(comment)
        url = f"https://yoomoney.ru/to/{self._wallet}?amount={price_rub}&comment={encoded_comment}"
        keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney (–°–ë–ü)", url=url)],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")]
        ]
        await update.message.reply_text(
            "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (—Å—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω.):",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    async def _payment_confirm_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user = query.from_user
        
        amount = context.user_data.get("payment_amount")
        price = context.user_data.get("payment_price")
        comment = context.user_data.get("payment_comment")
        friend_username = context.user_data.get("friend_username")

        if not all([amount, price, comment]):
            await query.answer("‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return

        await query.answer()
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

        payer_username = f"@{user.username}" if user.username else user.full_name
        
        admin_text = (
            f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!\n\n"
            f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {payer_username} (ID: `{user.id}`)\n"
        )
        if friend_username:
            admin_text += f"üéÅ **–î–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:** `@{friend_username}`\n"
        admin_text += (
            f"‚≠êÔ∏è **–ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥:** {amount}\n"
            f"üí∞ **–°—É–º–º–∞:** {price} RUB\n"
            f"üìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É:** `{comment}`"
        )

        if friend_username:
            callback_data_confirm = f"admin_confirm_gift_{user.id}_{amount}_{friend_username}"
        else:
            callback_data_confirm = f"admin_confirm_self_{user.id}_{amount}"
        callback_data_decline = f"admin_decline_{user.id}"
        
        admin_keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=callback_data_confirm),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_decline)
            ]
        ]
        await context.bot.send_message(
            chat_id=self._admin_chat_id,
            text=admin_text,
            reply_markup=InlineKeyboardMarkup(admin_keyboard),
            parse_mode="Markdown"
        )
        
    async def _admin_action_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        parts = query.data.split("_")
        action_type = parts[1]
        original_message = query.message.text
        if action_type == "confirm":
            op_type = parts[2]
            if op_type == "self":
                user_id = int(parts[3])
                amount = int(parts[4])
                await self._user_data_manager.add_user_balance(user_id, amount)
                await context.bot.send_message(
                    chat_id=user_id, text=f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚≠êÔ∏è!"
                )
                await query.edit_message_text(
                    text=original_message + "\n\n**[ ‚úÖ –ü–õ–ê–¢–Å–ñ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù ]**",
                    parse_mode="Markdown",
                )
            elif op_type == "gift":
                payer_id, amount, recipient_username = int(parts[3]), int(parts[4]), parts[5]
                recipient_id = await self._user_data_manager.find_user_by_username(
                    recipient_username
                )
                if recipient_id:
                    await self._user_data_manager.add_user_balance(int(recipient_id), amount)
                    await context.bot.send_message(
                        chat_id=int(recipient_id),
                        text=f"üéÅ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–æ–¥–∞—Ä–æ–∫! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚≠êÔ∏è!",
                    )
                    await context.bot.send_message(
                        chat_id=payer_id,
                        text=f"‚úÖ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ {amount} ‚≠êÔ∏è –¥–ª—è @{recipient_username} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!",
                    )
                    await query.edit_message_text(
                        text=original_message
                        + f"\n\n**[ ‚úÖ –ü–û–î–ê–†–û–ö –î–û–°–¢–ê–í–õ–ï–ù ]**\n(–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient_username})",
                        parse_mode="Markdown",
                    )
                else:
                    await context.bot.send_message(
                        chat_id=payer_id,
                        text=f"‚ùóÔ∏è–í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{recipient_username} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                        f"–ó–≤—ë–∑–¥—ã –Ω–µ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @{self._support_username}.",
                    )
                    await query.edit_message_text(
                        text=original_message
                        + f"\n\n**[ ‚ùå –û–®–ò–ë–ö–ê: –ü–û–õ–£–ß–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù ]**\n(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{recipient_username})",
                        parse_mode="Markdown",
                    )
        elif action_type == "decline":
            user_id = int(parts[2])
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùóÔ∏è –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n @{self._support_username}",
            )
            await query.edit_message_text(
                text=original_message + "\n\n**[ ‚ùå –ü–õ–ê–¢–Å–ñ –û–¢–ö–õ–û–ù–Å–ù ]**",
                parse_mode="Markdown",
            )

    async def _purpose_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        context.user_data.pop("friend_username", None)
        purpose = query.data
        if purpose == "purpose_self":
            context.user_data["awaiting_amount"] = True
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω. 50):")
        elif purpose == "purpose_friend":
            context.user_data["awaiting_friend_username"] = True
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ @username –¥—Ä—É–≥–∞:")

    async def _handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = update.message.text.strip()
        if context.user_data.get("awaiting_friend_username"):
            await self._handle_friend_username(update, context, text)
            return
        if context.user_data.get("awaiting_amount"):
            await self._handle_amount_input(update, context, text)
            return
        if text == "‚≠ê –ö—É–ø–∏—Ç—å –ó–≤–µ–∑–¥—ã":
            await self._show_purchase_options(update)
        elif text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
            await self._partner_program(update, context)
            
    async def _handle_friend_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
        if not text.startswith("@"):
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username, –Ω–∞—á–∏–Ω–∞—è —Å @. –ü—Ä–∏–º–µ—Ä: @username")
            return
        context.user_data["friend_username"] = text[1:]
        context.user_data.pop("awaiting_friend_username")
        context.user_data["awaiting_amount"] = True
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω. 50).\n\n"
            "‚ùóÔ∏è**–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ username. "
            "–ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É, –∑–≤—ë–∑–¥—ã –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã.",
            parse_mode="Markdown",
        )

    async def _show_purchase_options(self, update: Update) -> None:
        keyboard = [
            [InlineKeyboardButton("–î–ª—è —Å–µ–±—è", callback_data="purpose_self")],
            [InlineKeyboardButton("–í –ø–æ–¥–∞—Ä–æ–∫", callback_data="purpose_friend")],
        ]
        await update.message.reply_text(
            "üéÅ –ö–æ–º—É –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã:", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _partner_program(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        ref, earned = await self._user_data_manager.get_user_stats(user_id)
        # –¢–µ–ø–µ—Ä—å generate_referral_link –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º—è –∏–∑ .env
        link = self._user_data_manager.generate_referral_link(user_id)
        text = (
            "<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
            "‚ú® –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 10% –æ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö!\n\n"
            f"<b>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{link}</code>\n\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref}</b>\n"
            f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{earned:.2f} RUB</b>"
        )
        keyboard = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f"–ü–æ–∫—É–ø–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã: {link}")],
        ]
        await update.message.reply_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML"
        )

    async def _set_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = [["‚≠ê –ö—É–ø–∏—Ç—å –ó–≤–µ–∑–¥—ã"], ["üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"]]
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
    def run(self) -> None:
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self._application.run_polling()


if __name__ == "__main__":
    try:
        bot = TelegramBotApp()
        bot.run()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
